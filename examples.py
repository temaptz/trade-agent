#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞
"""
import time
import json
from datetime import datetime
from config import Config
from trading_agent import TradingAgent
from bybit_client import BybitClient
from monitor import TradingMonitor

def example_single_analysis():
    """–ü—Ä–∏–º–µ—Ä –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    print("üîç –ü—Ä–∏–º–µ—Ä –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    print("-" * 40)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        config = Config()
        agent = TradingAgent(config)
        
        # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
        print("–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞...")
        result = agent.run_analysis()
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print(f"–†–µ—à–µ–Ω–∏–µ: {result.get('decision', 'N/A')}")
        print(f"–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {result.get('reasoning', 'N/A')}")
        
        if result.get('action'):
            action = result['action']
            print(f"–î–µ–π—Å—Ç–≤–∏–µ: {action.get('type', 'N/A')}")
            print(f"–°—Ç–∞—Ç—É—Å: {action.get('status', 'N/A')}")
        
        return result
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return None

def example_continuous_monitoring():
    """–ü—Ä–∏–º–µ—Ä –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("üîÑ –ü—Ä–∏–º–µ—Ä –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    print("-" * 40)
    
    try:
        config = Config()
        monitor = TradingMonitor(config)
        
        if not monitor.initialize():
            print("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
            return
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞ 10 –º–∏–Ω—É—Ç
        print("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞ 10 –º–∏–Ω—É—Ç...")
        start_time = time.time()
        
        while time.time() - start_time < 600:  # 10 –º–∏–Ω—É—Ç
            try:
                # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
                result = monitor.run_analysis_and_monitor()
                
                # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
                status = monitor.get_system_status()
                print(f"[{datetime.now().strftime('%H:%M:%S')}] "
                      f"–†–µ—à–µ–Ω–∏–µ: {result.get('decision', 'N/A')}, "
                      f"–ë–∞–ª–∞–Ω—Å BTC: {status.get('balance', {}).get('btc', 0):.8f}")
                
                # –ñ–¥–µ–º 2 –º–∏–Ω—É—Ç—ã
                time.sleep(120)
                
            except KeyboardInterrupt:
                print("\n–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω")
                break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")
                time.sleep(30)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report = monitor.generate_report()
        print("\n" + report)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

def example_market_analysis():
    """–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""
    print("üìä –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞")
    print("-" * 40)
    
    try:
        from market_tools import MarketDataTool, NewsSearchTool, TechnicalAnalysisTool
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        market_tool = MarketDataTool()
        news_tool = NewsSearchTool()
        tech_tool = TechnicalAnalysisTool()
        
        # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        market_data = market_tool._run("BTCUSDT", "1h", 100)
        print(f"–†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {market_data[:200]}...")
        
        # –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
        print("\n–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π...")
        news_data = news_tool._run("Bitcoin BTC cryptocurrency news", 3)
        print(f"–ù–æ–≤–æ—Å—Ç–∏: {news_data[:200]}...")
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        print("\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑...")
        tech_analysis = tech_tool._run("BTCUSDT", "1h")
        print(f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: {tech_analysis[:200]}...")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

def example_bybit_operations():
    """–ü—Ä–∏–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–π —Å Bybit"""
    print("üè¶ –ü—Ä–∏–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–π —Å Bybit")
    print("-" * 40)
    
    try:
        config = Config()
        client = BybitClient(config)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        print("–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...")
        balance = client.get_account_balance()
        print(f"–ë–∞–ª–∞–Ω—Å BTC: {balance.get('btc_balance', 0):.8f}")
        print(f"–ë–∞–ª–∞–Ω—Å USDT: {balance.get('usdt_balance', 0):.2f}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        print("\n–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã...")
        price = client.get_current_price()
        print(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC: ${price:.2f}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\n–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        market_data = client.get_market_data("BTCUSDT", "1h", 10)
        print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(market_data)} —Å–≤–µ—á–µ–π")
        
        if market_data:
            latest = market_data[-1]
            print(f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞: {latest}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

def example_error_handling():
    """–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("üõ°Ô∏è –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
    print("-" * 40)
    
    try:
        from error_handler import safe_execute, ErrorLogger
        import logging
        
        logger = logging.getLogger(__name__)
        error_logger = ErrorLogger(logger)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        def risky_function():
            import random
            if random.random() < 0.5:
                raise Exception("–°–ª—É—á–∞–π–Ω–∞—è –æ—à–∏–±–∫–∞")
            return "–£—Å–ø–µ—Ö"
        
        print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...")
        for i in range(5):
            result, error = safe_execute(risky_function)
            if error:
                print(f"–ü–æ–ø—ã—Ç–∫–∞ {i+1}: –û—à–∏–±–∫–∞ - {error}")
                error_logger.log_trading_error("test_operation", error)
            else:
                print(f"–ü–æ–ø—ã—Ç–∫–∞ {i+1}: {result}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

def example_configuration():
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    print("‚öôÔ∏è –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
    print("-" * 40)
    
    try:
        config = Config()
        
        print("–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print(f"–°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–ª–∏: {config.TRADING_SYMBOL}")
        print(f"–†–∞–∑–º–µ—Ä —Ç–æ—Ä–≥–æ–≤–ª–∏: {config.TRADE_AMOUNT}")
        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {config.MAX_POSITION_SIZE}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞: {config.RISK_PERCENTAGE}%")
        print(f"Ollama URL: {config.OLLAMA_BASE_URL}")
        print(f"Ollama –º–æ–¥–µ–ª—å: {config.OLLAMA_MODEL}")
        print(f"–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å: {config.BYBIT_TESTNET}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        from error_handler import validate_config
        try:
            validate_config(config)
            print("\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
    print("ü§ñ –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –¢–û–†–ì–û–í–û–ì–û –†–û–ë–û–¢–ê")
    print("=" * 50)
    
    examples = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", example_configuration),
        ("–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞", example_market_analysis),
        ("–û–ø–µ—Ä–∞—Ü–∏–∏ Bybit", example_bybit_operations),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", example_error_handling),
        ("–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", example_single_analysis),
        ("–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", example_continuous_monitoring),
    ]
    
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:")
    for i, (name, _) in enumerate(examples, 1):
        print(f"{i}. {name}")
    
    try:
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä (1-6) –∏–ª–∏ Enter –¥–ª—è –≤—Å–µ—Ö: ").strip()
        
        if choice:
            try:
                index = int(choice) - 1
                if 0 <= index < len(examples):
                    name, func = examples[index]
                    print(f"\n{'='*20} {name} {'='*20}")
                    func()
                else:
                    print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            except ValueError:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        else:
            # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
            for name, func in examples:
                print(f"\n{'='*20} {name} {'='*20}")
                try:
                    func()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ {name}: {e}")
                print()
    
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–µ—Ä–≤–∞–Ω—ã")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()