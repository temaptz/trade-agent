"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
"""
import asyncio
from trading_agent import TradingAgent
from market_analyzer import MarketAnalyzer
from news_analyzer import NewsAnalyzer
from bybit_client import BybitClient
from monitoring import TradingMonitor

async def example_market_analysis():
    """–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""
    print("=== –ü–†–ò–ú–ï–† –ê–ù–ê–õ–ò–ó–ê –†–´–ù–ö–ê ===")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Bybit
    bybit_client = BybitClient()
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–∫–∞
    market_analyzer = MarketAnalyzer(bybit_client)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
    analysis = await market_analyzer.analyze_market()
    
    print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞: {analysis.market_condition}")
    print(f"–¢—Ä–µ–Ω–¥: {analysis.price_trend}")
    print(f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {analysis.volatility:.2f}%")
    print(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {analysis.recommendation}")
    print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.confidence:.2f}")
    
    if analysis.technical_indicators.rsi:
        print(f"RSI: {analysis.technical_indicators.rsi:.2f}")
    
    if analysis.technical_indicators.macd:
        print(f"MACD: {analysis.technical_indicators.macd:.4f}")

async def example_news_analysis():
    """–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    print("\n=== –ü–†–ò–ú–ï–† –ê–ù–ê–õ–ò–ó–ê –ù–û–í–û–°–¢–ï–ô ===")
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π
    news_analyzer = NewsAnalyzer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π
    news_analysis = await news_analyzer.get_comprehensive_news_analysis()
    
    print(f"–í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {news_analysis['total_news']}")
    print(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö: {news_analysis['relevant_news']}")
    print(f"–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {news_analysis['sentiment_analysis']['sentiment']}")
    print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {news_analysis['sentiment_analysis']['confidence']:.2f}")
    
    print("\n–¢–æ–ø –Ω–æ–≤–æ—Å—Ç–∏:")
    for i, news in enumerate(news_analysis['top_news'][:3], 1):
        print(f"{i}. {news.title}")
        print(f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {news.relevance_score:.2f}")

async def example_trading_decision():
    """–ü—Ä–∏–º–µ—Ä –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
    print("\n=== –ü–†–ò–ú–ï–† –¢–û–†–ì–û–í–û–ì–û –†–ï–®–ï–ù–ò–Ø ===")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    agent = TradingAgent()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–ª–∏
    result = await agent.run_trading_cycle()
    
    if agent.current_state.last_signal:
        signal = agent.current_state.last_signal
        print(f"–†–µ—à–µ–Ω–∏–µ: {signal.action}")
        print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2f}")
        print(f"–ü—Ä–∏—á–∏–Ω–∞: {signal.reason}")
        
        if signal.price_target:
            print(f"–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {signal.price_target}")
        if signal.stop_loss:
            print(f"–°—Ç–æ–ø-–ª–æ—Å—Å: {signal.stop_loss}")
        if signal.take_profit:
            print(f"–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {signal.take_profit}")

async def example_bybit_operations():
    """–ü—Ä–∏–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–π —Å Bybit"""
    print("\n=== –ü–†–ò–ú–ï–† –û–ü–ï–†–ê–¶–ò–ô –° BYBIT ===")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Bybit
    bybit_client = BybitClient()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
    price = bybit_client.get_current_price()
    if price:
        print(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC: ${price:,.2f}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    market_data = bybit_client.get_market_data()
    if market_data:
        print(f"–û–±—ä–µ–º –∑–∞ 24—á: {market_data.volume:,.2f}")
        print(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {market_data.change_percent_24h:.2f}%")
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
    balance = bybit_client.get_account_balance()
    if balance and "list" in balance:
        for account in balance["list"]:
            if "coin" in account and account["coin"]:
                for coin in account["coin"]:
                    if coin["coin"] == "USDT":
                        print(f"–ë–∞–ª–∞–Ω—Å USDT: {coin['walletBalance']}")
                        break
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
    positions = bybit_client.get_positions()
    if positions:
        print(f"–û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
        for pos in positions:
            print(f"  {pos.side} {pos.size} @ {pos.entry_price}")
    else:
        print("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")

def example_monitoring():
    """–ü—Ä–∏–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("\n=== –ü–†–ò–ú–ï–† –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ===")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
    monitor = TradingMonitor()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    history = monitor.load_trading_history()
    print(f"–ó–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(history)}")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    metrics = monitor.calculate_performance_metrics()
    if metrics:
        print(f"–í—Å–µ–≥–æ —Ä–µ—à–µ–Ω–∏–π: {metrics['total_decisions']}")
        print(f"–ü–æ–∫—É–ø–∫–∏: {metrics['buy_decisions']}")
        print(f"–ü—Ä–æ–¥–∞–∂–∏: {metrics['sell_decisions']}")
        print(f"–£–¥–µ—Ä–∂–∞–Ω–∏—è: {metrics['hold_decisions']}")
        print(f"–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {metrics['avg_confidence']:.2f}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    status = monitor.get_system_status()
    print(f"–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status}")

async def example_full_cycle():
    """–ü—Ä–∏–º–µ—Ä –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã"""
    print("\n=== –ü–†–ò–ú–ï–† –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê ===")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    bybit_client = BybitClient()
    market_analyzer = MarketAnalyzer(bybit_client)
    news_analyzer = NewsAnalyzer()
    monitor = TradingMonitor()
    
    print("1. –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞...")
    market_analysis = await market_analyzer.analyze_market()
    print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: {market_analysis.market_condition}")
    print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {market_analysis.recommendation}")
    
    print("2. –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    news_analysis = await news_analyzer.get_comprehensive_news_analysis()
    print(f"   –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {news_analysis['sentiment_analysis']['sentiment']}")
    print(f"   –ù–æ–≤–æ—Å—Ç–µ–π: {news_analysis['total_news']}")
    
    print("3. –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è...")
    # –ó–¥–µ—Å—å –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è LLM –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
    print("   (–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Ollama)")
    
    print("4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
    monitor.log_market_analysis({
        "market_condition": market_analysis.market_condition.value,
        "price_trend": market_analysis.price_trend,
        "volatility": market_analysis.volatility,
        "recommendation": market_analysis.recommendation,
        "confidence": market_analysis.confidence
    })
    
    print("–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω!")

async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤"""
    print("ü§ñ –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê")
    print("=" * 60)
    
    try:
        # –ü—Ä–∏–º–µ—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
        await example_market_analysis()
        await example_news_analysis()
        
        # –ü—Ä–∏–º–µ—Ä—ã –æ–ø–µ—Ä–∞—Ü–∏–π
        await example_bybit_operations()
        
        # –ü—Ä–∏–º–µ—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        example_monitoring()
        
        # –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª
        await example_full_cycle()
        
        # –ü—Ä–∏–º–µ—Ä –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è (—Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
        # await example_trading_decision()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

if __name__ == "__main__":
    asyncio.run(main())