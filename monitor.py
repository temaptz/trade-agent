#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞
"""
import time
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any
from pathlib import Path

from config import Config
from trading_agent import TradingAgent
from bybit_client import BybitClient

logger = logging.getLogger(__name__)

class TradingMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞"""
    
    def __init__(self, config: Config):
        self.config = config
        self.agent = None
        self.bybit_client = None
        self.log_file = Path("trading_bot.log")
        self.stats_file = Path("trading_stats.json")
        self.stats = self._load_stats()
        
    def _load_stats(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞"""
        if self.stats_file.exists():
            try:
                with open(self.stats_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        return {
            "total_trades": 0,
            "successful_trades": 0,
            "failed_trades": 0,
            "total_profit": 0.0,
            "last_analysis": None,
            "last_trade": None,
            "errors": []
        }
    
    def _save_stats(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.stats_file, 'w', encoding='utf-8') as f:
                json.dump(self.stats, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        try:
            if not self.agent:
                self.agent = TradingAgent(self.config)
            if not self.bybit_client:
                self.bybit_client = BybitClient(self.config)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return False
    
    def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            status = {
                "timestamp": datetime.now().isoformat(),
                "ollama_status": self._check_ollama(),
                "bybit_status": self._check_bybit(),
                "balance": self._get_balance(),
                "recent_errors": self._get_recent_errors(),
                "last_analysis": self.stats.get("last_analysis"),
                "trading_stats": {
                    "total_trades": self.stats.get("total_trades", 0),
                    "successful_trades": self.stats.get("successful_trades", 0),
                    "success_rate": self._calculate_success_rate(),
                    "total_profit": self.stats.get("total_profit", 0.0)
                }
            }
            return status
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {"error": str(e)}
    
    def _check_ollama(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Ollama"""
        try:
            import requests
            response = requests.get("http://localhost:11434/api/tags", timeout=5)
            if response.status_code == 200:
                models = response.json().get('models', [])
                return {
                    "status": "online",
                    "models": [model['name'] for model in models],
                    "gemma_available": any('gemma' in model['name'].lower() for model in models)
                }
            else:
                return {"status": "error", "code": response.status_code}
        except Exception as e:
            return {"status": "offline", "error": str(e)}
    
    def _check_bybit(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Bybit"""
        try:
            if not self.bybit_client:
                return {"status": "not_initialized"}
            
            balance = self.bybit_client.get_account_balance()
            return {
                "status": "online",
                "balance_btc": balance.get('btc_balance', 0),
                "balance_usdt": balance.get('usdt_balance', 0)
            }
        except Exception as e:
            return {"status": "error", "error": str(e)}
    
    def _get_balance(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å"""
        try:
            if not self.bybit_client:
                return {}
            
            balance = self.bybit_client.get_account_balance()
            return {
                "btc": balance.get('btc_balance', 0),
                "usdt": balance.get('usdt_balance', 0),
                "total_usdt": balance.get('total', {}).get('USDT', 0)
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return {}
    
    def _get_recent_errors(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–∑ –ª–æ–≥–æ–≤"""
        try:
            if not self.log_file.exists():
                return []
            
            errors = []
            with open(self.log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                
            # –ò—â–µ–º –æ—à–∏–±–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            cutoff_time = datetime.now() - timedelta(hours=24)
            
            for line in lines[-1000:]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å—Ç—Ä–æ–∫
                if "ERROR" in line:
                    try:
                        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ –ª–æ–≥–∞
                        time_str = line.split(' - ')[0]
                        log_time = datetime.strptime(time_str, '%Y-%m-%d %H:%M:%S,%f')
                        
                        if log_time > cutoff_time:
                            errors.append({
                                "time": time_str,
                                "message": line.strip()
                            })
                    except:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                        errors.append({
                            "time": "unknown",
                            "message": line.strip()
                        })
            
            return errors[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—à–∏–±–æ–∫
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            return []
    
    def _calculate_success_rate(self) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        total = self.stats.get("total_trades", 0)
        successful = self.stats.get("successful_trades", 0)
        
        if total == 0:
            return 0.0
        
        return (successful / total) * 100
    
    def run_analysis_and_monitor(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            result = self.agent.run_analysis()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats["last_analysis"] = datetime.now().isoformat()
            
            if result.get("action"):
                self.stats["total_trades"] += 1
                
                action = result["action"]
                if action.get("status") == "executed":
                    self.stats["successful_trades"] += 1
                    logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    self.stats["failed_trades"] += 1
                    logger.warning(f"‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {action.get('status')}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._save_stats()
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º: {e}")
            self.stats["errors"].append({
                "time": datetime.now().isoformat(),
                "error": str(e)
            })
            self._save_stats()
            return {"error": str(e)}
    
    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ —Ä–æ–±–æ—Ç–∞"""
        try:
            status = self.get_system_status()
            
            report = f"""
ü§ñ –û–¢–ß–ï–¢ –û –†–ê–ë–û–¢–ï –¢–û–†–ì–û–í–û–ì–û –†–û–ë–û–¢–ê
{'='*50}
–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:
‚Ä¢ Ollama: {status.get('ollama_status', {}).get('status', 'unknown')}
‚Ä¢ Bybit: {status.get('bybit_status', {}).get('status', 'unknown')}

üí∞ –ë–ê–õ–ê–ù–°:
‚Ä¢ BTC: {status.get('balance', {}).get('btc', 0):.8f}
‚Ä¢ USDT: {status.get('balance', {}).get('usdt', 0):.2f}

üìà –¢–û–†–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {status.get('trading_stats', {}).get('total_trades', 0)}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {status.get('trading_stats', {}).get('successful_trades', 0)}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {status.get('trading_stats', {}).get('success_rate', 0):.1f}%
‚Ä¢ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {status.get('trading_stats', {}).get('total_profit', 0):.2f} USDT

üïê –ü–û–°–õ–ï–î–ù–ò–ô –ê–ù–ê–õ–ò–ó:
{status.get('last_analysis', '–ù–∏–∫–æ–≥–¥–∞')}

‚ùå –ü–û–°–õ–ï–î–ù–ò–ï –û–®–ò–ë–ö–ò:
"""
            
            recent_errors = status.get('recent_errors', [])
            if recent_errors:
                for error in recent_errors[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—à–∏–±–∫–∏
                    report += f"‚Ä¢ {error.get('time', 'unknown')}: {error.get('message', 'unknown')}\n"
            else:
                report += "‚Ä¢ –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n"
            
            return report
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}"

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞")
    parser.add_argument("--status", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    parser.add_argument("--report", action="store_true", help="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")
    parser.add_argument("--analyze", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑")
    parser.add_argument("--monitor", type=int, help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ N –º–∏–Ω—É—Ç")
    
    args = parser.parse_args()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    config = Config()
    monitor = TradingMonitor(config)
    
    if not monitor.initialize():
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        return 1
    
    if args.status:
        status = monitor.get_system_status()
        print(json.dumps(status, ensure_ascii=False, indent=2))
    
    elif args.report:
        report = monitor.generate_report()
        print(report)
    
    elif args.analyze:
        result = monitor.run_analysis_and_monitor()
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {result}")
    
    elif args.monitor:
        print(f"üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞ {args.monitor} –º–∏–Ω—É—Ç...")
        start_time = time.time()
        
        while time.time() - start_time < args.monitor * 60:
            try:
                result = monitor.run_analysis_and_monitor()
                print(f"[{datetime.now().strftime('%H:%M:%S')}] –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {result.get('decision', 'N/A')}")
                
                # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                time.sleep(300)
                
            except KeyboardInterrupt:
                print("\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    else:
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π")
    
    return 0

if __name__ == "__main__":
    import sys
    sys.exit(main())