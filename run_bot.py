#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –ò–ò –∞–≥–µ–Ω—Ç–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –±–∏—Ç–∫–æ–π–Ω–æ–º
"""
import asyncio
import sys
import signal
import argparse
from pathlib import Path
from loguru import logger

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from main import BitcoinTradingBot

def setup_logging(debug: bool = False):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.remove()
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    logger.add(
        sys.stdout,
        level="DEBUG" if debug else "INFO",
        format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | {message}",
        colorize=True
    )
    
    # –§–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.add(
        "logs/trading_{time:YYYY-MM-DD}.log",
        rotation="1 day",
        retention="7 days",
        level="DEBUG" if debug else "INFO",
        format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {message}"
    )
    
    # –õ–æ–≥–∏ –æ—à–∏–±–æ–∫
    logger.add(
        "logs/errors_{time:YYYY-MM-DD}.log",
        rotation="1 day",
        retention="30 days",
        level="ERROR",
        format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {message}"
    )

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
        if sys.version_info < (3, 8):
            logger.error("–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not Path(".env").exists():
            logger.error("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        try:
            import pandas
            import numpy
            import aiohttp
            import sqlite3
        except ImportError as e:
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
            logger.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
            return False
        
        logger.info("–í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: {e}")
        return False

def check_ollama():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama"""
    try:
        import subprocess
        result = subprocess.run(["ollama", "list"], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            if "gemma2:9b" in result.stdout:
                logger.info("Ollama –∏ –º–æ–¥–µ–ª—å gemma2:9b –≥–æ—Ç–æ–≤—ã")
                return True
            else:
                logger.warning("–ú–æ–¥–µ–ª—å gemma2:9b –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: ollama pull gemma2:9b")
                return False
        else:
            logger.error("Ollama –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ollama serve")
            return False
            
    except (subprocess.TimeoutExpired, FileNotFoundError):
        logger.error("Ollama –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Ollama: https://ollama.ai/")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Ollama: {e}")
        return False

async def run_bot(debug: bool = False, test_mode: bool = False):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ò–ò –∞–≥–µ–Ω—Ç–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –±–∏—Ç–∫–æ–π–Ω–æ–º")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        if not check_requirements():
            return False
        
        if not test_mode:
            if not check_ollama():
                logger.warning("–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –±–µ–∑ Ollama (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
        bot = BitcoinTradingBot()
        
        if test_mode:
            logger.info("üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –æ–¥–∏–Ω —Ü–∏–∫–ª")
            result = await bot.run_cycle()
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ü–∏–∫–ª–∞: {result.get('final_decision', {}).get('action', 'HOLD')}")
        else:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏")
            await bot.start_trading()
        
        return True
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        return True
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞...")
    sys.exit(0)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ò–ò –∞–≥–µ–Ω—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏ –±–∏—Ç–∫–æ–π–Ω–æ–º")
    parser.add_argument("--debug", action="store_true", help="–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏")
    parser.add_argument("--test", action="store_true", help="–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–æ–¥–∏–Ω —Ü–∏–∫–ª)")
    parser.add_argument("--setup", action="store_true", help="–ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    parser.add_argument("--status", action="store_true", help="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞")
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(debug=args.debug)
    
    if args.setup:
        logger.info("üîß –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
        import subprocess
        subprocess.run([sys.executable, "setup.py"])
        return
    
    if args.status:
        logger.info("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...")
        try:
            import sqlite3
            if Path("trading_data.db").exists():
                conn = sqlite3.connect("trading_data.db")
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM trading_events")
                events_count = cursor.fetchone()[0]
                cursor.execute("SELECT COUNT(*) FROM market_data")
                market_count = cursor.fetchone()[0]
                conn.close()
                
                logger.info(f"üìà –°–æ–±—ã—Ç–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {events_count}")
                logger.info(f"üìä –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {market_count}")
            else:
                logger.info("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        success = asyncio.run(run_bot(debug=args.debug, test_mode=args.test))
        if success:
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error("‚ùå –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()