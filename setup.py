#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞
"""
import os
import sys
import subprocess
import shutil
from pathlib import Path

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –æ—à–∏–±–∫–∞: {e.stderr}")
        return False

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
    print("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}")
    return True

def install_dependencies():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    return run_command("pip install -r requirements.txt", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")

def check_ollama():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ Ollama"""
    print("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama...")
    try:
        result = subprocess.run("ollama --version", shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Ollama —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        else:
            print("‚ùå Ollama –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except FileNotFoundError:
        print("‚ùå Ollama –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def install_ollama():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Ollama"""
    print("üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama...")
    if sys.platform == "linux":
        return run_command("curl -fsSL https://ollama.ai/install.sh | sh", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama")
    elif sys.platform == "darwin":
        return run_command("brew install ollama", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama —á–µ—Ä–µ–∑ Homebrew")
    else:
        print("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –≤–∞—à–µ–π –û–°")
        print("üìñ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Ollama –≤—Ä—É—á–Ω—É—é: https://ollama.ai/download")
        return False

def start_ollama():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Ollama"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Ollama...")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ Ollama
        result = subprocess.run("ollama list", shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Ollama —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return True
        else:
            print("‚ö†Ô∏è Ollama –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: ollama serve")
            return False
    except:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Ollama")
        return False

def download_gemma_model():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å Gemma"""
    return run_command("ollama pull gemma2:9b", "–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Gemma2:9b")

def create_env_file():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª .env –∏–∑ –ø—Ä–∏–º–µ—Ä–∞"""
    env_example = Path(".env.example")
    env_file = Path(".env")
    
    if env_file.exists():
        print("‚úÖ –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True
    
    if env_example.exists():
        shutil.copy(env_example, env_file)
        print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env –∏–∑ .env.example")
        print("‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å API –∫–ª—é—á–∏ –≤ —Ñ–∞–π–ª–µ .env")
        return True
    else:
        print("‚ùå –§–∞–π–ª .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    try:
        import langchain
        import langgraph
        import ccxt
        import pandas
        import numpy
        print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("ü§ñ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞ —Å –ò–ò-–∞–≥–µ–Ω—Ç–æ–º")
    print("=" * 50)
    
    success = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    if not check_python_version():
        success = False
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not install_dependencies():
        success = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞/—É—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama
    if not check_ollama():
        if not install_ollama():
            success = False
        else:
            if not start_ollama():
                success = False
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    if not download_gemma_model():
        success = False
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    if not create_env_file():
        success = False
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤
    if not test_imports():
        success = False
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ API –∫–ª—é—á–∏ Bybit")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω: ollama serve")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–æ–±–æ—Ç–∞: python main.py")
        print("\n‚ö†Ô∏è –í–ê–ñ–ù–û: –ù–∞—á–Ω–∏—Ç–µ —Å —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏ (BYBIT_TESTNET=true)")
    else:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        print("üìñ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏")
        print("üìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å –≤ README.md")
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())