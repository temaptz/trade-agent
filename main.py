"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞
"""
import logging
import time
import signal
import sys
from datetime import datetime
from typing import Optional

from config import Config
from trading_agent import TradingAgent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('trading_bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

class TradingBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞"""
    
    def __init__(self):
        self.config = Config()
        self.agent = None
        self.running = False
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.running = False
    
    def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ–±–æ—Ç–∞"""
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.config.validate()
            logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
            self.agent = TradingAgent(self.config)
            logger.info("–¢–æ—Ä–≥–æ–≤—ã–π –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit
            balance = self.agent.bybit_client.get_account_balance()
            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit —É—Å–ø–µ—à–Ω–æ. –ë–∞–ª–∞–Ω—Å: {balance}")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def run_single_analysis(self) -> Optional[dict]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            logger.info("=" * 50)
            logger.info(f"–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            result = self.agent.run_analysis()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._log_analysis_result(result)
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return None
    
    def run_continuous(self, interval_minutes: int = 60):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"""
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval_minutes} –º–∏–Ω)")
            self.running = True
            
            while self.running:
                try:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
                    result = self.run_single_analysis()
                    
                    if result and result.get("action"):
                        action = result["action"]
                        if action.get("status") == "executed":
                            logger.info(f"–¢–æ—Ä–≥–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {action}")
                    
                    # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                    if self.running:
                        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {interval_minutes} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
                        time.sleep(interval_minutes * 60)
                
                except KeyboardInterrupt:
                    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
                    break
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
                    if self.running:
                        logger.info("–û–∂–∏–¥–∞–Ω–∏–µ 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                        time.sleep(5 * 60)
            
            logger.info("–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ: {e}")
    
    def _log_analysis_result(self, result: dict):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞"""
        if not result:
            logger.warning("–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—É—Å—Ç")
            return
        
        logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
        logger.info(f"  –†–µ—à–µ–Ω–∏–µ: {result.get('decision', 'N/A')}")
        logger.info(f"  –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {result.get('reasoning', 'N/A')}")
        
        if result.get('action'):
            action = result['action']
            logger.info(f"  –î–µ–π—Å—Ç–≤–∏–µ: {action.get('type', 'N/A')}")
            logger.info(f"  –°—Ç–∞—Ç—É—Å: {action.get('status', 'N/A')}")
            if action.get('amount'):
                logger.info(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {action['amount']}")
        
        if result.get('error'):
            logger.error(f"  –û—à–∏–±–∫–∞: {result['error']}")
    
    def get_status(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–æ–±–æ—Ç–∞"""
        try:
            if not self.agent:
                return {"status": "not_initialized"}
            
            balance = self.agent.bybit_client.get_account_balance()
            current_price = self.agent.bybit_client.get_current_price()
            
            return {
                "status": "running" if self.running else "stopped",
                "current_price": current_price,
                "balance": balance,
                "config": {
                    "symbol": self.config.TRADING_SYMBOL,
                    "trade_amount": self.config.TRADE_AMOUNT,
                    "risk_percentage": self.config.RISK_PERCENTAGE
                }
            }
        except Exception as e:
            return {"status": "error", "error": str(e)}

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –¢–æ—Ä–≥–æ–≤—ã–π —Ä–æ–±–æ—Ç —Å –ò–ò-–∞–≥–µ–Ω—Ç–æ–º")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ–±–æ—Ç–∞
    bot = TradingBot()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    if not bot.initialize():
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–æ–±–æ—Ç–∞")
        return 1
    
    print("‚úÖ –†–æ–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
    print("1. –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
    print("2. –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º (–∫–∞–∂–¥—ã–π —á–∞—Å)")
    print("3. –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)")
    print("4. –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)")
    print("5. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å")
    
    try:
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-5): ").strip()
        
        if choice == "1":
            print("\nüîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
            result = bot.run_single_analysis()
            if result:
                print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞")
        
        elif choice == "2":
            print("\nüîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–∫–∞–∂–¥—ã–π —á–∞—Å)...")
            bot.run_continuous(60)
        
        elif choice == "3":
            print("\nüîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)...")
            bot.run_continuous(30)
        
        elif choice == "4":
            print("\nüîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)...")
            bot.run_continuous(15)
        
        elif choice == "5":
            print("\nüìä –°—Ç–∞—Ç—É—Å —Ä–æ–±–æ—Ç–∞:")
            status = bot.get_status()
            print(f"–°—Ç–∞—Ç—É—Å: {status.get('status', 'N/A')}")
            if 'current_price' in status:
                print(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC: ${status['current_price']:.2f}")
            if 'balance' in status:
                balance = status['balance']
                print(f"–ë–∞–ª–∞–Ω—Å BTC: {balance.get('btc_balance', 0):.8f}")
                print(f"–ë–∞–ª–∞–Ω—Å USDT: {balance.get('usdt_balance', 0):.2f}")
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            return 1
        
        return 0
        
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        return 0
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())